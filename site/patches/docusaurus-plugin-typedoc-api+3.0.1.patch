diff --git a/node_modules/docusaurus-plugin-typedoc-api/lib/components/ApiPage.js b/node_modules/docusaurus-plugin-typedoc-api/lib/components/ApiPage.js
index 7b40f71..89e6bad 100644
--- a/node_modules/docusaurus-plugin-typedoc-api/lib/components/ApiPage.js
+++ b/node_modules/docusaurus-plugin-typedoc-api/lib/components/ApiPage.js
@@ -6,13 +6,13 @@ function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) r
 require('@vscode/codicons/dist/codicon.css');
 require('../../assets/styles-8ad572ec.css');
 const React = require('react');
-const DocPage = require('@theme/DocPage');
+const DocRoot = require('@theme/DocRoot');
 const ApiDataContext = require('./ApiDataContext.js');
 const _interopDefault = e => e && e.__esModule ? e : {
   default: e
 };
 const React__default = /*#__PURE__*/_interopDefault(React);
-const DocPage__default = /*#__PURE__*/_interopDefault(DocPage);
+const DocRoot__default = /*#__PURE__*/_interopDefault(DocRoot);
 
 /* eslint-disable no-param-reassign */
 
@@ -64,7 +64,7 @@ function ApiPage(_ref) {
     value: value
   }, /*#__PURE__*/React__default.default.createElement("div", {
     className: "apiPage"
-  }, /*#__PURE__*/React__default.default.createElement(DocPage__default.default, props)));
+  }, /*#__PURE__*/React__default.default.createElement(DocRoot__default.default, props)));
 }
 module.exports = ApiPage;
 //# sourceMappingURL=ApiPage.js.map
diff --git a/node_modules/docusaurus-plugin-typedoc-api/lib/index.js b/node_modules/docusaurus-plugin-typedoc-api/lib/index.js
index 57a9cb7..2084e55 100644
--- a/node_modules/docusaurus-plugin-typedoc-api/lib/index.js
+++ b/node_modules/docusaurus-plugin-typedoc-api/lib/index.js
@@ -252,8 +252,7 @@ function typedocApiPlugin(context, pluginOptions) {
             component: path__default.default.join(__dirname, './components/ApiIndex.js'),
             modules: {
               options: optionsData,
-              packages: packagesData,
-              versionMetadata
+              packages: packagesData
             },
             sidebar: 'api'
           });
@@ -261,14 +260,30 @@ function typedocApiPlugin(context, pluginOptions) {
         addRoute({
           path: indexPermalink,
           exact: false,
-          component: path__default.default.join(__dirname, './components/ApiPage.js'),
-          routes,
-          modules: {
-            options: optionsData,
-            packages: packagesData,
-            versionMetadata
-          },
-          priority: loadedVersion.routePriority
+          component: '@theme/DocsRoot',
+          routes: [
+            {
+              path: indexPermalink,
+              exact: false,
+              component: '@theme/DocVersionRoot',
+              modules: {
+                version: versionMetadata
+              },
+              routes: [
+                {
+                  path: indexPermalink,
+                  exact: false,
+                  component: path__default.default.join(__dirname, './components/ApiPage.js'),
+                  routes,
+                  modules: {
+                    options: optionsData,
+                    packages: packagesData
+                  },
+                  priority: loadedVersion.routePriority
+                }
+              ]
+            }
+          ],
         });
       }));
     },
diff --git a/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js b/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js
index b443d83..63d86bd 100644
--- a/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js
+++ b/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js
@@ -182,7 +182,16 @@ function sortReflectionGroups(reflections) {
     });
   });
 }
-function matchesEntryPoint(sourceFile, entryPoint, {
+function buildSourceFileNameMap(modChildren) {
+  const map = {};
+  modChildren.forEach(child => {
+    child.sources?.forEach(sf => {
+      map[sf.fileName] = true;
+    });
+  });
+  return map;
+}
+function sourceFileMatchesEntryPoint(sourceFile, entryPoint, {
   deep,
   single
 }) {
@@ -207,6 +216,26 @@ function matchesEntryPoint(sourceFile, entryPoint, {
     deep && sourceFile.startsWith(entryPoint)
   );
 }
+function modContainsEntryPoint(mod, entry, meta) {
+  const relModSources = mod.sources ?? [];
+  const relModSourceFile = relModSources.find(sf => !!sf.fileName)?.fileName ?? '';
+  const relEntryPoint = url.joinUrl(meta.packagePath, entry.path);
+
+  // Monorepos of 1 package don't have sources, so use the child sources
+  if (!relModSourceFile) {
+    const relEntryPointInSourceFiles = !!meta.allSourceFiles[relEntryPoint];
+    if (relEntryPointInSourceFiles) {
+      return sourceFileMatchesEntryPoint(relEntryPoint, relEntryPoint, {
+        deep: meta.isUsingDeepImports,
+        single: meta.isSinglePackage
+      });
+    }
+  }
+  return sourceFileMatchesEntryPoint(relModSourceFile, relEntryPoint, {
+    deep: meta.isUsingDeepImports,
+    single: meta.isSinglePackage
+  });
+}
 function extractReflectionModules(project, isSinglePackage) {
   const modules = [];
   const inheritChildren = () => {
@@ -249,15 +278,14 @@ function flattenAndGroupPackages(packageConfigs, project, urlPrefix, options, ve
   const packages = {};
   const packagesWithDeepImports = [];
   modules.forEach(mod => {
-    // Monorepos of 1 package don't have sources, so use the child sources
-    const relSources = mod.sources ?? mod.children?.[0].sources ?? [];
-    const relSourceFile = relSources.find(sf => !!sf.fileName)?.fileName ?? '';
+    const allSourceFiles = buildSourceFileNameMap(mod.children ?? []);
     packageConfigs.some(cfg => Object.entries(cfg.entryPoints).some(([importPath, entry]) => {
-      const relEntryPoint = url.joinUrl(cfg.packagePath, entry.path);
       const isUsingDeepImports = !entry.path.match(/\.tsx?$/);
-      if (!matchesEntryPoint(relSourceFile, relEntryPoint, {
-        deep: isUsingDeepImports,
-        single: isSinglePackage
+      if (!modContainsEntryPoint(mod, entry, {
+        allSourceFiles,
+        isSinglePackage,
+        isUsingDeepImports,
+        packagePath: cfg.packagePath
       })) {
         return false;
       }
