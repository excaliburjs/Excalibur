diff --git a/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js b/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js
index b443d83..63d86bd 100644
--- a/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js
+++ b/node_modules/docusaurus-plugin-typedoc-api/lib/plugin/data.js
@@ -182,7 +182,16 @@ function sortReflectionGroups(reflections) {
     });
   });
 }
-function matchesEntryPoint(sourceFile, entryPoint, {
+function buildSourceFileNameMap(modChildren) {
+  const map = {};
+  modChildren.forEach(child => {
+    child.sources?.forEach(sf => {
+      map[sf.fileName] = true;
+    });
+  });
+  return map;
+}
+function sourceFileMatchesEntryPoint(sourceFile, entryPoint, {
   deep,
   single
 }) {
@@ -207,6 +216,26 @@ function matchesEntryPoint(sourceFile, entryPoint, {
     deep && sourceFile.startsWith(entryPoint)
   );
 }
+function modContainsEntryPoint(mod, entry, meta) {
+  const relModSources = mod.sources ?? [];
+  const relModSourceFile = relModSources.find(sf => !!sf.fileName)?.fileName ?? '';
+  const relEntryPoint = url.joinUrl(meta.packagePath, entry.path);
+
+  // Monorepos of 1 package don't have sources, so use the child sources
+  if (!relModSourceFile) {
+    const relEntryPointInSourceFiles = !!meta.allSourceFiles[relEntryPoint];
+    if (relEntryPointInSourceFiles) {
+      return sourceFileMatchesEntryPoint(relEntryPoint, relEntryPoint, {
+        deep: meta.isUsingDeepImports,
+        single: meta.isSinglePackage
+      });
+    }
+  }
+  return sourceFileMatchesEntryPoint(relModSourceFile, relEntryPoint, {
+    deep: meta.isUsingDeepImports,
+    single: meta.isSinglePackage
+  });
+}
 function extractReflectionModules(project, isSinglePackage) {
   const modules = [];
   const inheritChildren = () => {
@@ -249,15 +278,14 @@ function flattenAndGroupPackages(packageConfigs, project, urlPrefix, options, ve
   const packages = {};
   const packagesWithDeepImports = [];
   modules.forEach(mod => {
-    // Monorepos of 1 package don't have sources, so use the child sources
-    const relSources = mod.sources ?? mod.children?.[0].sources ?? [];
-    const relSourceFile = relSources.find(sf => !!sf.fileName)?.fileName ?? '';
+    const allSourceFiles = buildSourceFileNameMap(mod.children ?? []);
     packageConfigs.some(cfg => Object.entries(cfg.entryPoints).some(([importPath, entry]) => {
-      const relEntryPoint = url.joinUrl(cfg.packagePath, entry.path);
       const isUsingDeepImports = !entry.path.match(/\.tsx?$/);
-      if (!matchesEntryPoint(relSourceFile, relEntryPoint, {
-        deep: isUsingDeepImports,
-        single: isSinglePackage
+      if (!modContainsEntryPoint(mod, entry, {
+        allSourceFiles,
+        isSinglePackage,
+        isUsingDeepImports,
+        packagePath: cfg.packagePath
       })) {
         return false;
       }
